- name: Deploy to remote host
  env:
    DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
    DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
    APP_DIR: ${{ secrets.APP_DIR }}
    SSH_PORT: ${{ secrets.SSH_PORT }}
    NODE_ENV: production
    BASE_PATH: ${{ inputs.basePath }}
    PM2_NAME: ${{ inputs.pm2Name }}
    PORT: ${{ inputs.port }}
    IS_PREVIEW: ${{ inputs.isPreview }}
    BRANCH: ${{ inputs.branch }}
    PR_NUMBER: ${{ inputs.prNumber }}
  run: |
    set -e
    SSH_OPTS="-o StrictHostKeyChecking=yes -o BatchMode=yes"
    if [ -n "$SSH_PORT" ]; then
      SSH_OPTS="$SSH_OPTS -p $SSH_PORT"
    fi

    ssh $SSH_OPTS "$DEPLOY_USER@$DEPLOY_HOST" "
      set -e
      echo '🧩 Running deployment sanity checks...'
      mkdir -p \"$APP_DIR\"

      # --- Ownership sanity check ---
      echo 'Checking ownership and permissions:'
      ls -ld \"$APP_DIR\" || true
      stat -c '%U:%G %a %n' \"$APP_DIR\" || true

      # --- Mark repo as safe for git ---
      echo 'Configuring Git safe.directory...'
      git config --global --add safe.directory \"$APP_DIR\"

      # --- Validate that Git trusts it ---
      echo 'Verifying safe.directory setting:'
      git config --get-all safe.directory || true

      # --- Ensure pnpm is active ---
      command -v pnpm >/dev/null 2>&1 || (
        command -v corepack >/dev/null 2>&1 || /usr/local/bin/corepack enable || true
        corepack enable && corepack prepare pnpm@10.19.0 --activate
      )

      cd \"$APP_DIR\"

      if [ -d .git ]; then
        echo '🔁 Existing git repo found — fetching updates...'
        git fetch --all --prune
        if [ \"$IS_PREVIEW\" = \"true\" ] && [ -n \"$PR_NUMBER\" ]; then
          git fetch origin pull/$PR_NUMBER/head:pr-$PR_NUMBER
          git checkout pr-$PR_NUMBER
        else
          git reset --hard origin/${BRANCH:-main}
          git clean -fd
        fi
      else
        echo '🧱 Cloning repository fresh...'
        git clone https://github.com/bobfridley/summit-care .
        if [ \"$IS_PREVIEW\" = \"true\" ] && [ -n \"$PR_NUMBER\" ]; then
          git fetch origin pull/$PR_NUMBER/head:pr-$PR_NUMBER
          git checkout pr-$PR_NUMBER
        else
          git reset --hard origin/${BRANCH:-main}
        fi
      fi

      echo '📦 Installing dependencies...'
      pnpm install --frozen-lockfile || pnpm install
      pnpm ignored-builds || true

      echo '🏗️ Building project...'
      BASE_PATH=\"$BASE_PATH\" NODE_ENV=\"$NODE_ENV\" pnpm run build

      echo '🚀 Restarting app with PM2...'
      ( command -v pm2 >/dev/null 2>&1 && pm2 reload \"$PM2_NAME\" ) \
        || pnpm dlx pm2 reload \"$PM2_NAME\" \
        || pnpm dlx pm2 start 'pnpm -- run start' --name \"$PM2_NAME\" -- -p \"$PORT\"

      pnpm dlx pm2 save || true
      echo '✅ Deployment complete!'
    "
