name: Reusable Deploy

on:
  workflow_call:
    inputs:
      envName:
        description: 'Environment name (production|staging|preview)'
        required: true
        type: string
      url:
        description: 'Public URL for this environment'
        required: true
        type: string
      basePath:
        description: 'Next.js basePath (e.g. /summit-care)'
        required: true
        type: string
      pm2Name:
        description: 'PM2 process name'
        required: true
        type: string
      port:
        description: 'Port for Next.js server (e.g. 3000)'
        required: true
        type: number
      branch:
        description: 'Git branch to deploy (main|develop). Omit for preview.'
        required: false
        type: string
      isPreview:
        description: 'Is this a preview deployment?'
        required: true
        type: boolean
      prNumber:
        description: 'Pull request number (only for preview)'
        required: false
        type: number
    secrets:
      DEPLOY_USER:
        required: true
      DEPLOY_HOST:
        required: true
      APP_DIR:
        required: true
      SSH_PRIVATE_KEY:
        required: true
      SSH_PORT:
        required: false
      KNOWN_HOSTS:
        required: false # optional; we will auto-scan if not provided

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.envName }}
      url: ${{ inputs.url }}

    steps:
      # Not strictly required since we deploy via SSH pulling from GitHub,
      # but harmless to keep in most repos.
      - name: Checkout (no artifacts used; safe to skip)
        uses: actions/checkout@v4
        with:
          set-safe-directory: '*'

      - name: Add safe directory for Git
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      # Requires repo secret: SSH_PRIVATE_KEY (PEM), typically an ed25519 key
      - name: Add deploy key to ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY }}

      # 🛡️ Host key install with runtime fallback
      - name: Install pinned SSH host key (or fallback to ssh-keyscan)
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          KNOWN_HOSTS: ${{ secrets.KNOWN_HOSTS }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
        run: |
          set -e
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          if [ -n "$KNOWN_HOSTS" ]; then
            printf '%s\n' "$KNOWN_HOSTS" > ~/.ssh/known_hosts
            echo "✅ Wrote KNOWN_HOSTS secret to ~/.ssh/known_hosts"
          else
            echo "⚠️ KNOWN_HOSTS not set — using ssh-keyscan"
            if [ -n "$SSH_PORT" ]; then
              (ssh-keyscan -p "$SSH_PORT" -t ed25519 "$DEPLOY_HOST" 2>/dev/null || true) >> ~/.ssh/known_hosts
              (ssh-keyscan -p "$SSH_PORT" -t rsa "$DEPLOY_HOST" 2>/dev/null || true)     >> ~/.ssh/known_hosts
            else
              (ssh-keyscan -t ed25519 "$DEPLOY_HOST" 2>/dev/null || true) >> ~/.ssh/known_hosts
              (ssh-keyscan -t rsa "$DEPLOY_HOST" 2>/dev/null || true)     >> ~/.ssh/known_hosts
            fi
            echo "✅ Captured host keys via ssh-keyscan"
          fi

          chmod 600 ~/.ssh/known_hosts

      - name: Sanity SSH
        env:
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
        run: |
          set -e
          SSH_OPTS="-o StrictHostKeyChecking=yes -o BatchMode=yes"
          if [ -n "$SSH_PORT" ]; then SSH_OPTS="$SSH_OPTS -p $SSH_PORT"; fi
          ssh $SSH_OPTS "$DEPLOY_USER@$DEPLOY_HOST" "echo 'SSH OK:' \$(whoami) '@' \$(hostname); uname -a"

      - name: Deploy to remote host
        env:
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          APP_DIR: ${{ secrets.APP_DIR }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          NODE_ENV: production
          BASE_PATH: ${{ inputs.basePath }}
          PM2_NAME: ${{ inputs.pm2Name }}
          PORT: ${{ inputs.port }} # ✅ use app port input, not SSH port
          IS_PREVIEW: ${{ inputs.isPreview }}
          BRANCH: ${{ inputs.branch }}
          PR_NUMBER: ${{ inputs.prNumber }}
        run: |
          set -e
          SSH_OPTS="-o StrictHostKeyChecking=yes -o BatchMode=yes"
          if [ -n "$SSH_PORT" ]; then
            SSH_OPTS="$SSH_OPTS -p $SSH_PORT"
          fi

          ssh $SSH_OPTS "$DEPLOY_USER@$DEPLOY_HOST" "
            set -e
            command -v pnpm >/dev/null 2>&1 || (command -v corepack >/dev/null 2>&1 || /usr/local/bin/corepack enable || true; corepack enable && corepack prepare pnpm@10.19.0 --activate)

            mkdir -p \"$APP_DIR\"
            cd \"$APP_DIR\"

            if [ -d .git ]; then
              git fetch --all --prune
              if [ \"$IS_PREVIEW\" = \"true\" ] && [ -n \"$PR_NUMBER\" ]; then
                git fetch origin pull/$PR_NUMBER/head:pr-$PR_NUMBER
                git checkout pr-$PR_NUMBER
              else
                git reset --hard origin/${BRANCH:-main}
                git clean -fd
              fi
            else
              git clone https://github.com/bobfridley/summit-care .
              if [ \"$IS_PREVIEW\" = \"true\" ] && [ -n \"$PR_NUMBER\" ]; then
                git fetch origin pull/$PR_NUMBER/head:pr-$PR_NUMBER
                git checkout pr-$PR_NUMBER
              else
                git reset --hard origin/${BRANCH:-main}
              fi
            fi

            pnpm install --frozen-lockfile || pnpm install
            pnpm ignored-builds || true

            BASE_PATH=\"$BASE_PATH\" NODE_ENV=\"$NODE_ENV\" pnpm run build

            ( command -v pm2 >/dev/null 2>&1 && pm2 reload \"$PM2_NAME\" ) \
              || pnpm dlx pm2 reload \"$PM2_NAME\" \
              || pnpm dlx pm2 start 'pnpm -- run start' --name \"$PM2_NAME\" -- -p \"$PORT\"

            pnpm dlx pm2 save || true
          "
